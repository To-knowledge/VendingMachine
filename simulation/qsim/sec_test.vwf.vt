// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2018 15:12:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          VendingMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VendingMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_i;
reg [1:0] num_five_i;
reg [3:0] num_one_i;
reg num_ten_i;
reg num_twenty_i;
reg [3:0] product_type_i;
reg reselected_i;
reg rst_i;
// wires                                               
wire [1:0] Current_state_o;
wire [1:0] five_num_o;
wire [2:0] one_num_o;
wire out_o;
wire ten_num_o;

// assign statements (if any)                          
VendingMachine i1 (
// port map - connection between master ports and signals/registers   
	.Current_state_o(Current_state_o),
	.clk_i(clk_i),
	.five_num_o(five_num_o),
	.num_five_i(num_five_i),
	.num_one_i(num_one_i),
	.num_ten_i(num_ten_i),
	.num_twenty_i(num_twenty_i),
	.one_num_o(one_num_o),
	.out_o(out_o),
	.product_type_i(product_type_i),
	.reselected_i(reselected_i),
	.rst_i(rst_i),
	.ten_num_o(ten_num_o)
);
initial 
begin 
#1000000 $finish;
end 

// clk_i
always
begin
	clk_i = 1'b0;
	clk_i = #5000 1'b1;
	#5000;
end 

// rst_i
initial
begin
	rst_i = 1'b0;
	rst_i = #130000 1'b1;
end 
// product_type_i[ 3 ]
initial
begin
	product_type_i[3] = 1'b0;
end 
// product_type_i[ 2 ]
initial
begin
	product_type_i[2] = 1'b0;
	product_type_i[2] = #330000 1'b1;
	product_type_i[2] = #80000 1'b0;
end 
// product_type_i[ 1 ]
initial
begin
	product_type_i[1] = 1'b0;
	product_type_i[1] = #520000 1'b1;
	product_type_i[1] = #70000 1'b0;
end 
// product_type_i[ 0 ]
initial
begin
	product_type_i[0] = 1'b0;
	product_type_i[0] = #690000 1'b1;
	product_type_i[0] = #70000 1'b0;
end 

// reselected_i
initial
begin
	reselected_i = 1'b0;
	reselected_i = #620000 1'b1;
	reselected_i = #40000 1'b0;
end 

// num_twenty_i
initial
begin
	num_twenty_i = 1'b0;
	num_twenty_i = #390000 1'b1;
	num_twenty_i = #30000 1'b0;
end 

// num_ten_i
initial
begin
	num_ten_i = 1'b0;
	num_ten_i = #790000 1'b1;
	num_ten_i = #50000 1'b0;
end 
// num_five_i[ 1 ]
initial
begin
	num_five_i[1] = 1'b0;
end 
// num_five_i[ 0 ]
initial
begin
	num_five_i[0] = 1'b0;
end 
// num_one_i[ 3 ]
initial
begin
	num_one_i[3] = 1'b0;
end 
// num_one_i[ 2 ]
initial
begin
	num_one_i[2] = 1'b0;
end 
// num_one_i[ 1 ]
initial
begin
	num_one_i[1] = 1'b0;
end 
// num_one_i[ 0 ]
initial
begin
	num_one_i[0] = 1'b0;
end 
endmodule

