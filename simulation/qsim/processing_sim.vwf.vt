// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2018 15:10:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processing
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processing_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] money_buffer_i;
reg [3:0] price_i;
// wires                                               
wire temp_o;

// assign statements (if any)                          
processing i1 (
// port map - connection between master ports and signals/registers   
	.money_buffer_i(money_buffer_i),
	.price_i(price_i),
	.temp_o(temp_o)
);
initial 
begin 
#1000000 $finish;
end 
// price_i[ 3 ]
initial
begin
	price_i[3] = 1'b0;
	price_i[3] = #580000 1'b1;
	price_i[3] = #80000 1'b0;
end 
// price_i[ 2 ]
initial
begin
	price_i[2] = 1'b0;
	price_i[2] = #220000 1'b1;
	price_i[2] = #130000 1'b0;
	price_i[2] = #40000 1'b1;
	price_i[2] = #150000 1'b0;
end 
// price_i[ 1 ]
initial
begin
	price_i[1] = 1'b0;
	price_i[1] = #90000 1'b1;
	price_i[1] = #110000 1'b0;
	price_i[1] = #20000 1'b1;
	price_i[1] = #130000 1'b0;
	price_i[1] = #40000 1'b1;
	price_i[1] = #150000 1'b0;
	price_i[1] = #40000 1'b1;
	price_i[1] = #80000 1'b0;
end 
// price_i[ 0 ]
initial
begin
	price_i[0] = 1'b0;
	price_i[0] = #220000 1'b1;
	price_i[0] = #130000 1'b0;
	price_i[0] = #40000 1'b1;
	price_i[0] = #150000 1'b0;
end 
// money_buffer_i[ 4 ]
initial
begin
	money_buffer_i[4] = 1'b0;
	money_buffer_i[4] = #390000 1'b1;
	money_buffer_i[4] = #150000 1'b0;
end 
// money_buffer_i[ 3 ]
initial
begin
	money_buffer_i[3] = 1'b0;
	money_buffer_i[3] = #580000 1'b1;
	money_buffer_i[3] = #80000 1'b0;
end 
// money_buffer_i[ 2 ]
initial
begin
	money_buffer_i[2] = 1'b0;
	money_buffer_i[2] = #220000 1'b1;
	money_buffer_i[2] = #130000 1'b0;
	money_buffer_i[2] = #40000 1'b1;
	money_buffer_i[2] = #150000 1'b0;
end 
// money_buffer_i[ 1 ]
initial
begin
	money_buffer_i[1] = 1'b0;
	money_buffer_i[1] = #580000 1'b1;
	money_buffer_i[1] = #80000 1'b0;
end 
// money_buffer_i[ 0 ]
initial
begin
	money_buffer_i[0] = 1'b0;
	money_buffer_i[0] = #90000 1'b1;
	money_buffer_i[0] = #110000 1'b0;
	money_buffer_i[0] = #20000 1'b1;
	money_buffer_i[0] = #130000 1'b0;
end 
endmodule

